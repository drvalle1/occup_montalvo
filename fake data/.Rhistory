m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
tau2.gammas.estim=mod1$tau2.gamma[ngibbs,]
compare1(estim=tau2.gammas.estim,true=true2.gamma)
tau2.gammas.estim=mod1$tau2.gamma[ngibbs,]
compare1(estim=tau2.gammas.estim,true=tau2.gamma.true)
m.gammas.estim=colMeans(mod1$m.gamma[4500:ngibbs,])
# m.gammas.estim=mod1$m.gamma[ngibbs,]
compare1(estim=m.gammas.estim,true=m.gamma.true)
sqrt(tau2.gamma.true)
rm(list=ls())
set.seed(18)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=5
nparam.occ=4
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
m.betas.true=m.betas=matrix(sample(seq1,size=nparam.occ*ngr,replace=T),
nparam.occ,ngr)
tau2.betas=0.1 #set by user
#get betas
betas=matrix(NA,nparam.occ,nspp)
for (i in 1:nspp){
mu1=m.betas[,w[i]]
betas[,i]=rnorm(nparam.occ,mean=mu1,sd=sqrt(tau2.betas))
}
betas.true=betas
#visualize betas
rango=range(betas)
par(mfrow=c(3,1),mar=rep(1,4))
for (i in 1:ngr) image(betas[,w==i],zlim=rango)
#get intercepts
alpha.s.true=alpha.s=runif(nspp,min=-0.2,max=0.2)
alpha.mat=matrix(alpha.s,nloc,nspp,byrow=T)
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*nparam.occ),nloc,nparam.occ)
#generate occupancy status
media=alpha.mat+xmat.occ%*%betas
zstar.true=zstar=matrix(rnorm(nloc*nspp,mean=media,sd=1),nloc,nspp)
z.true=z=matrix(ifelse(zstar>0,1,0),nloc,nspp)
#---------------------------------
#---------------------------------
#DETECTION
tau2.gamma.true=tau2.gamma=runif(nparam.det,min=0,max=0.3)
m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
gammas=matrix(NA,nparam.det,nspp)
for (i in 1:nparam.det){
gammas[i,]=rnorm(nspp,mean=m.gamma[i],sd=sqrt(tau2.gamma[i]))
}
gammas.true=gammas
#get covariates for detection
xmat.det=array(NA,dim=c(nloc,nparam.det,nrep))
for (i in 1:nrep){
tmp=rnorm(nloc*(nparam.det-1))
tmp1=cbind(1,matrix(tmp,nloc,nparam.det-1))
xmat.det[,,i]=tmp1
}
#generate observations
media=ystar=y=array(NA,dim=c(nloc,nspp,nrep))
for (i in 1:nrep){
media[,,i]=xmat.det[,,i]%*%gammas
ystar[,,i]=rnorm(nloc*nspp,mean=media[,,i],sd=1)
#site has to be occupied and species has to have been detected
y[,,i]=ifelse(ystar[,,i]>0 & z.true==1,1,0)
}
ystar.true=ystar
#export data
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
y1=matrix(y,nloc*nspp*nrep,1)
write.csv(y1,'fake data y.csv',row.names=F)
write.csv(xmat.occ,'fake data xmat occ.csv',row.names=F)
xmat.det1=matrix(xmat.det,nloc*nparam.det*nrep,1)
write.csv(xmat.det1,'fake data xmat det.csv',row.names=F)
library('mvtnorm')
set.seed(35)
#basic settings
nrep=5
#get functions
setwd('U:\\GIT_models\\occup_montalvo')
source('aux occup montalvo.R')
source('gibbs_occup_montalvo.R')
#get design matrix for occupancy
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
xmat.occ=data.matrix(read.csv('fake data xmat occ.csv',as.is=T))
xtx.occ=t(xmat.occ)%*%xmat.occ
nparam.occ=ncol(xmat.occ)
nloc=nrow(xmat.occ)
#get data
tmp=read.csv('fake data y.csv',as.is=T)
nspp=nrow(tmp)/(nrep*nloc); nspp
y=array(tmp$V1,dim=c(nloc,nspp,nrep))
#design matrix for detection
tmp=read.csv('fake data xmat det.csv',as.is=T)
nparam.det=nrow(tmp)/(nloc*nrep); nparam.det
xmat.det=array(tmp$V1,dim=c(nloc,nparam.det,nrep))
#basic settings
ngr=10
ngibbs=5000
nburn=ngibbs/2
tau2.betas=0.1
#priors
tau2.a=0.1; tau2.b=0.1
gamma1=0.1
nspp=ncol(y[,,1])
nloc=nrow(xmat.occ)
nparam.occ=ncol(xmat.occ)
nparam.det=ncol(xmat.det[,,1])
ystar=y
ystar=ifelse(y==1,1,-1)
m.betas=matrix(0,nparam.occ,ngr)
w=sample(1:ngr,size=nspp,replace=T)
alpha.s=rep(0,nspp)
betas=matrix(0,nparam.occ,nspp)
theta=rep(1/ngr,ngr)
z=apply(y,c(1,2),max)
zstar=matrix(ifelse(z==1,1,-1),nloc,nspp)
m.gamma=rep(0,nparam.det)
tau2.gamma=rep(1,nparam.det)
m.alpha=0
tau2.alpha=1
gammas=matrix(0,nparam.det,nspp)
#MCMC settings
store.alpha.s=matrix(NA,ngibbs,nspp)
store.m.alpha=matrix(NA,ngibbs,1)
store.tau2.alpha=matrix(NA,ngibbs,1)
store.gammas=matrix(NA,ngibbs,nparam.det*nspp)
store.m.gamma=matrix(NA,ngibbs,nparam.det)
store.tau2.gamma=matrix(NA,ngibbs,nparam.det)
store.betas=matrix(NA,ngibbs,nparam.occ*nspp)
store.m.betas=matrix(NA,ngibbs,nparam.occ*ngr)
store.w=matrix(NA,ngibbs,nspp)
store.theta=matrix(NA,ngibbs,ngr)
options(warn=2)
ystar=ystar.true
z=z.true
gammas=sample.gammas(ystar=ystar,xmat.det=xmat.det,z=z,m.gamma=m.gamma,tau2.gamma=tau2.gamma,
nparam.det=nparam.det,nspp=nspp,nrep=nrep)
plot(gammas,gammas.true)
m.gamma=sample.m.gamma(gammas=gammas,tau2.gamma=tau2.gamma,nspp=nspp,nparam.det=nparam.det)
plot(m.gamma,m.gamma.true)
tau2.gamma=sample.tau2.gamma(gammas=gammas,m=m.gamma,nspp=nspp,tau2.a=tau2.a,
tau2.b=tau2.b,nparam.det=nparam.det)
plot(tau2.gamma,tau2.gamma.true)
#initial values
nspp=ncol(y[,,1])
nloc=nrow(xmat.occ)
nparam.occ=ncol(xmat.occ)
nparam.det=ncol(xmat.det[,,1])
ystar=y
ystar=ifelse(y==1,1,-1)
m.betas=matrix(0,nparam.occ,ngr)
w=sample(1:ngr,size=nspp,replace=T)
alpha.s=rep(0,nspp)
betas=matrix(0,nparam.occ,nspp)
theta=rep(1/ngr,ngr)
z=apply(y,c(1,2),max)
zstar=matrix(ifelse(z==1,1,-1),nloc,nspp)
m.gamma=rep(0,nparam.det)
tau2.gamma=rep(1,nparam.det)
m.alpha=0
tau2.alpha=1
gammas=matrix(0,nparam.det,nspp)
#MCMC settings
store.alpha.s=matrix(NA,ngibbs,nspp)
store.m.alpha=matrix(NA,ngibbs,1)
store.tau2.alpha=matrix(NA,ngibbs,1)
store.gammas=matrix(NA,ngibbs,nparam.det*nspp)
store.m.gamma=matrix(NA,ngibbs,nparam.det)
store.tau2.gamma=matrix(NA,ngibbs,nparam.det)
store.betas=matrix(NA,ngibbs,nparam.occ*nspp)
store.m.betas=matrix(NA,ngibbs,nparam.occ*ngr)
store.w=matrix(NA,ngibbs,nspp)
store.theta=matrix(NA,ngibbs,ngr)
options(warn=2)
z=sample.z(xmat.occ=xmat.occ,betas=betas,nloc=nloc,alpha.s=alpha.s,
nspp=nspp,nrep=nrep,y=y,xmat.det=xmat.det,gammas=gammas)
# z=z.true
zstar=sample.zstar(z=z,xmat.occ=xmat.occ,betas=betas,nloc=nloc,nspp=nspp,
alpha.s=alpha.s)
# zstar=zstar.true
ystar=sample.ystar(nrep=nrep,xmat.det=xmat.det,gammas=gammas,
y=y,nspp=nspp)
# ystar=ystar.true
#update intercept and associated prior parameters
alpha.s=sample.alpha.s(m.alpha=m.alpha,tau2.alpha=tau2.alpha,
xmat.occ=xmat.occ,zstar=zstar,nspp=nspp,
w=w,betas=betas,nloc=nloc)
m.alpha=sample.m.alpha(nspp=nspp,alpha.s=alpha.s,tau2.alpha=tau2.alpha)
tau2.alpha=sample.tau2.alpha(nspp=nspp,alpha.s=alpha.s,
m.alpha=m.alpha,tau2.a=tau2.a,tau2.b=tau2.b)
#update gammas and associated prior parameters
gammas=sample.gammas(ystar=ystar,xmat.det=xmat.det,z=z,m.gamma=m.gamma,tau2.gamma=tau2.gamma,
nparam.det=nparam.det,nspp=nspp,nrep=nrep)
m.gamma=sample.m.gamma(gammas=gammas,tau2.gamma=tau2.gamma,nspp=nspp,nparam.det=nparam.det)
tau2.gamma=sample.tau2.gamma(gammas=gammas,m=m.gamma,nspp=nspp,tau2.a=tau2.a,
tau2.b=tau2.b,nparam.det=nparam.det)
plot(gammas,gammas.true)
rm(list=ls())
library('mvtnorm')
set.seed(35)
#basic settings
nrep=5
#get functions
setwd('U:\\GIT_models\\occup_montalvo')
source('aux occup montalvo.R')
source('gibbs_occup_montalvo.R')
#get design matrix for occupancy
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
xmat.occ=data.matrix(read.csv('fake data xmat occ.csv',as.is=T))
xtx.occ=t(xmat.occ)%*%xmat.occ
nparam.occ=ncol(xmat.occ)
nloc=nrow(xmat.occ)
#get data
tmp=read.csv('fake data y.csv',as.is=T)
nspp=nrow(tmp)/(nrep*nloc); nspp
y=array(tmp$V1,dim=c(nloc,nspp,nrep))
#design matrix for detection
tmp=read.csv('fake data xmat det.csv',as.is=T)
nparam.det=nrow(tmp)/(nloc*nrep); nparam.det
xmat.det=array(tmp$V1,dim=c(nloc,nparam.det,nrep))
#basic settings
ngr=10
ngibbs=1000
nburn=ngibbs/2
tau2.betas=0.1
#priors
tau2.a=0.1; tau2.b=0.1
gamma1=0.1
#run gibbs
mod1=gibbs_occup(y=y,xmat.occ=xmat.occ,xmat.det=xmat.det,ngr=ngr,
tau2.a=tau2.a,tau2.b=tau2.b,gamma1=gamma1,
ngibbs=ngibbs,nburn=nburn,tau2.betas=tau2.betas)
set.seed(18)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=5
nparam.occ=4
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
m.betas.true=m.betas=matrix(sample(seq1,size=nparam.occ*ngr,replace=T),
nparam.occ,ngr)
tau2.betas=0.1 #set by user
#get betas
betas=matrix(NA,nparam.occ,nspp)
for (i in 1:nspp){
mu1=m.betas[,w[i]]
betas[,i]=rnorm(nparam.occ,mean=mu1,sd=sqrt(tau2.betas))
}
betas.true=betas
#visualize betas
rango=range(betas)
par(mfrow=c(3,1),mar=rep(1,4))
for (i in 1:ngr) image(betas[,w==i],zlim=rango)
#get intercepts
alpha.s.true=alpha.s=runif(nspp,min=-0.2,max=0.2)
alpha.mat=matrix(alpha.s,nloc,nspp,byrow=T)
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*nparam.occ),nloc,nparam.occ)
#generate occupancy status
media=alpha.mat+xmat.occ%*%betas
zstar.true=zstar=matrix(rnorm(nloc*nspp,mean=media,sd=1),nloc,nspp)
z.true=z=matrix(ifelse(zstar>0,1,0),nloc,nspp)
#---------------------------------
#---------------------------------
#DETECTION
tau2.gamma.true=tau2.gamma=runif(nparam.det,min=0,max=0.3)
m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
gammas=matrix(NA,nparam.det,nspp)
for (i in 1:nparam.det){
gammas[i,]=rnorm(nspp,mean=m.gamma[i],sd=sqrt(tau2.gamma[i]))
}
gammas.true=gammas
#get covariates for detection
xmat.det=array(NA,dim=c(nloc,nparam.det,nrep))
for (i in 1:nrep){
tmp=rnorm(nloc*(nparam.det-1))
tmp1=cbind(1,matrix(tmp,nloc,nparam.det-1))
xmat.det[,,i]=tmp1
}
#generate observations
media=ystar=y=array(NA,dim=c(nloc,nspp,nrep))
for (i in 1:nrep){
media[,,i]=xmat.det[,,i]%*%gammas
ystar[,,i]=rnorm(nloc*nspp,mean=media[,,i],sd=1)
#site has to be occupied and species has to have been detected
y[,,i]=ifelse(ystar[,,i]>0 & z.true==1,1,0)
}
ystar.true=ystar
gammas.estim=matrix(mod1$gammas[ngibbs,],nparam.det,nspp)
compare1(estim=gammas.estim,true=gammas.true)
compare1=function(estim,true){
rango=range(c(true,estim))
plot(true,estim,ylim=rango,xlim=rango)
lines(rango,rango,col='red',lwd=2)
}
gammas.estim=matrix(mod1$gammas[ngibbs,],nparam.det,nspp)
compare1(estim=gammas.estim,true=gammas.true)
m.gammas.estim=colMeans(mod1$m.gamma[4500:ngibbs,])
# m.gammas.estim=mod1$m.gamma[ngibbs,]
compare1(estim=m.gammas.estim,true=m.gamma.true)
m.gammas.estim=mod1$m.gamma[ngibbs,]
# m.gammas.estim=mod1$m.gamma[ngibbs,]
compare1(estim=m.gammas.estim,true=m.gamma.true)
tau2.gammas.estim=mod1$tau2.gamma[ngibbs,]
compare1(estim=tau2.gammas.estim,true=tau2.gamma.true)
rm(list=ls())
set.seed(32)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=3
nparam.occ=4
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
m.betas.true=m.betas=matrix(sample(seq1,size=nparam.occ*ngr,replace=T),
nparam.occ,ngr)
tau2.betas=0.1 #set by user
#get betas
betas=matrix(NA,nparam.occ,nspp)
for (i in 1:nspp){
mu1=m.betas[,w[i]]
betas[,i]=rnorm(nparam.occ,mean=mu1,sd=sqrt(tau2.betas))
}
betas.true=betas
#visualize betas
rango=range(betas)
par(mfrow=c(3,1),mar=rep(1,4))
for (i in 1:ngr) image(betas[,w==i],zlim=rango)
#get intercepts
alpha.s.true=alpha.s=runif(nspp,min=-0.2,max=0.2)
alpha.mat=matrix(alpha.s,nloc,nspp,byrow=T)
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*nparam.occ),nloc,nparam.occ)
#generate occupancy status
media=alpha.mat+xmat.occ%*%betas
zstar.true=zstar=matrix(rnorm(nloc*nspp,mean=media,sd=1),nloc,nspp)
z.true=z=matrix(ifelse(zstar>0,1,0),nloc,nspp)
#---------------------------------
#---------------------------------
#DETECTION
tau2.gamma.true=tau2.gamma=runif(nparam.det,min=0,max=0.3)
m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
gammas=matrix(NA,nparam.det,nspp)
for (i in 1:nparam.det){
gammas[i,]=rnorm(nspp,mean=m.gamma[i],sd=sqrt(tau2.gamma[i]))
}
gammas.true=gammas
#get covariates for detection
xmat.det=array(NA,dim=c(nloc,nparam.det,nrep))
for (i in 1:nrep){
tmp=rnorm(nloc*(nparam.det-1))
tmp1=cbind(1,matrix(tmp,nloc,nparam.det-1))
xmat.det[,,i]=tmp1
}
#generate observations
media=ystar=y=array(NA,dim=c(nloc,nspp,nrep))
for (i in 1:nrep){
media[,,i]=xmat.det[,,i]%*%gammas
ystar[,,i]=rnorm(nloc*nspp,mean=media[,,i],sd=1)
#site has to be occupied and species has to have been detected
y[,,i]=ifelse(ystar[,,i]>0 & z.true==1,1,0)
}
ystar.true=ystar
#export data
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
y1=matrix(y,nloc*nspp*nrep,1)
write.csv(y1,'fake data y.csv',row.names=F)
write.csv(xmat.occ,'fake data xmat occ.csv',row.names=F)
xmat.det1=matrix(xmat.det,nloc*nparam.det*nrep,1)
write.csv(xmat.det1,'fake data xmat det.csv',row.names=F)
rm(list=ls())
library('mvtnorm')
set.seed(35)
#basic settings
nrep=5
#get functions
setwd('U:\\GIT_models\\occup_montalvo')
source('aux occup montalvo.R')
source('gibbs_occup_montalvo.R')
#get design matrix for occupancy
setwd('U:\\GIT_models\\occup_montalvo\\fake data')
xmat.occ=data.matrix(read.csv('fake data xmat occ.csv',as.is=T))
xtx.occ=t(xmat.occ)%*%xmat.occ
nparam.occ=ncol(xmat.occ)
nloc=nrow(xmat.occ)
#get data
tmp=read.csv('fake data y.csv',as.is=T)
nspp=nrow(tmp)/(nrep*nloc); nspp
y=array(tmp$V1,dim=c(nloc,nspp,nrep))
#design matrix for detection
tmp=read.csv('fake data xmat det.csv',as.is=T)
nparam.det=nrow(tmp)/(nloc*nrep); nparam.det
xmat.det=array(tmp$V1,dim=c(nloc,nparam.det,nrep))
#basic settings
ngr=10
ngibbs=1000
nburn=ngibbs/2
tau2.betas=0.1
#priors
tau2.a=0.1; tau2.b=0.1
gamma1=0.1
#run gibbs
mod1=gibbs_occup(y=y,xmat.occ=xmat.occ,xmat.det=xmat.det,ngr=ngr,
tau2.a=tau2.a,tau2.b=tau2.b,gamma1=gamma1,
ngibbs=ngibbs,nburn=nburn,tau2.betas=tau2.betas)
set.seed(32)
#basic settings
nloc=1000
nrep=5
nspp=150
ngr=3
nparam.occ=4
nparam.det=3
#latent group membership
w.true=w=sample(1:ngr,size=nspp,replace=T)
#OCCUPANCY
#parameters
seq1=seq(from=-2,to=2,by=1)
m.betas.true=m.betas=matrix(sample(seq1,size=nparam.occ*ngr,replace=T),
nparam.occ,ngr)
tau2.betas=0.1 #set by user
#get betas
betas=matrix(NA,nparam.occ,nspp)
for (i in 1:nspp){
mu1=m.betas[,w[i]]
betas[,i]=rnorm(nparam.occ,mean=mu1,sd=sqrt(tau2.betas))
}
betas.true=betas
#visualize betas
rango=range(betas)
par(mfrow=c(3,1),mar=rep(1,4))
for (i in 1:ngr) image(betas[,w==i],zlim=rango)
#get intercepts
alpha.s.true=alpha.s=runif(nspp,min=-0.2,max=0.2)
alpha.mat=matrix(alpha.s,nloc,nspp,byrow=T)
#get covariates for occupancy
xmat.occ=matrix(rnorm(nloc*nparam.occ),nloc,nparam.occ)
#generate occupancy status
media=alpha.mat+xmat.occ%*%betas
zstar.true=zstar=matrix(rnorm(nloc*nspp,mean=media,sd=1),nloc,nspp)
z.true=z=matrix(ifelse(zstar>0,1,0),nloc,nspp)
#---------------------------------
#---------------------------------
#DETECTION
tau2.gamma.true=tau2.gamma=runif(nparam.det,min=0,max=0.3)
m.gamma.true=m.gamma=runif(nparam.det,min=-1,max=1)
gammas=matrix(NA,nparam.det,nspp)
for (i in 1:nparam.det){
gammas[i,]=rnorm(nspp,mean=m.gamma[i],sd=sqrt(tau2.gamma[i]))
}
gammas.true=gammas
#get covariates for detection
xmat.det=array(NA,dim=c(nloc,nparam.det,nrep))
for (i in 1:nrep){
tmp=rnorm(nloc*(nparam.det-1))
tmp1=cbind(1,matrix(tmp,nloc,nparam.det-1))
xmat.det[,,i]=tmp1
}
#generate observations
media=ystar=y=array(NA,dim=c(nloc,nspp,nrep))
for (i in 1:nrep){
media[,,i]=xmat.det[,,i]%*%gammas
ystar[,,i]=rnorm(nloc*nspp,mean=media[,,i],sd=1)
#site has to be occupied and species has to have been detected
y[,,i]=ifelse(ystar[,,i]>0 & z.true==1,1,0)
}
ystar.true=ystar
compare1=function(estim,true){
rango=range(c(true,estim))
plot(true,estim,ylim=rango,xlim=rango)
lines(rango,rango,col='red',lwd=2)
}
#how many groups
plot(mod1$theta[ngibbs,],type='h')
aux=data.frame(w.true=w.true,w.estim=w.estim)
k=table(aux); k
aux=data.frame(w.true=w.true,w.estim=mod1$w[ngibbs,])
k=table(aux); k
seq1=c(3,1,2)
k[,seq1]
betas.estim=matrix(mod1$betas[ngibbs,],nparam.occ,nspp)
compare1(estim=betas.estim,true=betas.true)
ngr=10
m.betas.estim=matrix(mod1$m.betas[ngibbs,],nparam.occ,ngr)
ind=seq1
compare1(m.betas.estim[,ind],m.betas.true)
alpha.s.estim=mod1$alpha.s[ngibbs,]
compare1(estim=alpha.s.estim,true=alpha.s.true)
gammas.estim=matrix(mod1$gammas[ngibbs,],nparam.det,nspp)
compare1(estim=gammas.estim,true=gammas.true)
m.gammas.estim=mod1$m.gamma[ngibbs,]
# m.gammas.estim=mod1$m.gamma[ngibbs,]
compare1(estim=m.gammas.estim,true=m.gamma.true)
tau2.gammas.estim=mod1$tau2.gamma[ngibbs,]
compare1(estim=tau2.gammas.estim,true=tau2.gamma.true)
